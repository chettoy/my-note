{"version":3,"sources":["Config.js","components/MusicPlayer.js"],"names":["Config","autoplay","PlayerView","styled","div","MusicPlayer","props","audio","Audio","status","textSpace","playlist","Array","playingIndex","waittingForPlay","recoveryProgressHandled","_DEBUG","playerEvents","error","textContent","code","canplay","callPlay","play","playing","recoveryProgress","progressLoop","setInterval","substr","getProgressText","saveProgressInfo","clearInterval","progress","isAnimating","readyState","showAnimating","pause","waiting","ended","playNext","getTextSpace","span","document","createElement","style","visibility","parentNode","appendChild","containerStyle","getComputedStyle","offsetWidth","parseFloat","paddingLeft","paddingRight","getBoundingClientRect","width","length","removeChild","handleClick","paused","currentTime","window","sessionStorage","music_paused","src","playByIndex","i","console","log","Promise","resolve","reject","fetch","process","then","res","json","result","list","tracks","push","id","MessageHandler","index","this","url","music_playingIndex","nextIndex","parseInt","music_currentTime","s","count","Math","round","duration","processLoop","playPromise","undefined","_","catch","name","className","ref","dom","onClick","addEventListener","loadPlaylist","removeEventListener","React","Component"],"mappings":"+KAIeA,EAJA,CACbC,UAAU,G,QCINC,EAAaC,IAAOC,IAAV,0EAAGD,CAAH,sHAOVE,E,YAuDJ,WAAYC,GAAQ,IAAD,EAEjB,GAFiB,qBACjB,4CAAMA,KAvDRC,MAAQ,IAAIC,MAsDO,EArDnBC,OAAS,KAqDU,EApDnBC,UAAY,GAoDO,EAnDnBC,SAAW,IAAIC,MAAM,WAmDF,EAlDnBC,aAAe,EAkDI,EAjDnBC,iBAAkB,EAiDC,EAhDnBC,yBAA0B,EAgDP,EA/CnBC,QAAS,EA+CU,EA7CnBC,aAAe,CACbC,MAAO,WACL,EAAKT,OAAOU,YAAc,cAAgB,EAAKZ,MAAMW,MAAME,MAE7DC,QAAS,WACH,EAAKP,iBAAiB,EAAKQ,YAEjCC,KAAM,WACJ,EAAKT,iBAAkB,EACvB,EAAKL,OAAOU,YAAc,aAE5BK,QAAS,WACP,EAAKf,OAAOU,YAAc,IACrB,EAAKJ,yBACR,EAAKU,mBAEP,IAAMC,EAAeC,aAAY,WACc,MAAzC,EAAKlB,OAAOU,YAAYS,OAAO,EAAG,IAItC,EAAKnB,OAAOU,YAAc,EAAKU,kBAC/B,EAAKC,oBAJHC,cAAcL,KAKf,MAELM,SAAU,YACF,EAAKC,eAAkB,EAAK1B,MAAM2B,WAAa,GACnD,EAAKC,iBAGTC,MAAO,WACL,EAAK3B,OAAOU,YAAc,cAE5BkB,QAAS,WACF,EAAKJ,eACR,EAAKE,iBAGTG,MAAO,WACL,EAAK7B,OAAOU,YAAc,aAC1B,EAAKW,mBACL,EAAKS,aAIU,EA2EnBC,aAAe,WACb,IAAMC,EAAOC,SAASC,cAAc,QACpCF,EAAKG,MAAMC,WAAa,SACxB,EAAKpC,OAAOqC,WAAWC,YAAYN,GACnC,IAAMO,EAAiBC,iBAAiB,EAAKxC,OAAOqC,YACpD,IAAKL,EAAKtB,YAAc,IACtB,EAAKV,OAAOqC,WAAWI,aACpBC,WAAWH,EAAeI,aAAeD,WAAWH,EAAeK,eACjEZ,EAAKa,wBAAwBC,MAClCd,EAAKtB,aAAe,KACtB,EAAKT,UAAY+B,EAAKtB,YAAYqC,OAAS,EAC3C,EAAK/C,OAAOqC,WAAWW,YAAYhB,IAtFlB,EAiInBiB,YAAc,WACR,EAAKnD,MAAMoD,QAAqC,IAA3B,EAAKpD,MAAMqD,aAC9BC,OAAOC,iBACTA,eAAeC,aAAe,MAC5B,EAAKxD,MAAMyD,IACb,EAAK1C,WAEL,EAAK2C,YAAY,KAGfJ,OAAOC,iBACTA,eAAeC,aAAe,UAEhC,EAAKxD,MAAM6B,UA5IT,EAAKpB,OAAQ,CAAC,IAAD,WACJkD,GACT,EAAKjD,aAAa,IAAMiD,GAAK,EAAKjD,aAAaiD,GAC/C,EAAKjD,aAAaiD,GAAK,WACrBC,QAAQC,IAAR,qBAA0BF,EAA1B,MACA,EAAKjD,aAAa,IAAMiD,OAJ5B,IAAK,IAAMA,KAAK,EAAKjD,aAAe,EAAzBiD,GAHI,S,4EAaH,IAAD,OACb,OAAO,IAAIG,SAAQ,SAACC,EAASC,GAE3BC,MADYC,0BAETC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAG,GACE,IAAMC,EAAOD,EAAOA,OAAOE,OAC3B,IAAK,IAAMb,KAAKY,EACd,EAAKnE,SAASqE,KAAKF,EAAKZ,GAAGe,IAC7BX,EAAQO,MAEV,SAAA3D,GACEgE,IAAed,IAAIlD,GACnBqD,EAAOrD,W,kCAMLiE,GACV,GAAIA,GAASC,KAAKzE,SAAS6C,QAAU2B,EAAQ,EAC3CD,IAAed,IAAf,mBAA+Be,EAA/B,uBADF,CAIAC,KAAKvE,aAAesE,EACpB,IAAME,EAAM,iDAAmDD,KAAKzE,SAASwE,GAAS,OACtFC,KAAK7E,MAAMyD,IAAMqB,EACbxB,OAAOC,iBACTA,eAAewB,mBAAqBH,GACtCC,KAAKtE,iBAAkB,K,iCAIvB,IAAMyE,EAAYC,SAASJ,KAAKvE,cAAgB,EAC5C0E,EAAYH,KAAKzE,SAAS6C,OAC5B4B,KAAKnB,YAAYsB,GAEjBH,KAAKnB,YAAY,K,yCAKdJ,OAAOC,iBACRsB,KAAK7E,MAAM+B,MACbwB,eAAe2B,kBAAoB,EAEnC3B,eAAe2B,kBAAoBL,KAAK7E,MAAMqD,e,yCAKhDwB,KAAKrE,yBAA0B,EAC1B8C,OAAOC,iBACRA,eAAe2B,oBACjBL,KAAK7E,MAAMqD,YAAcE,eAAe2B,mBAEN,WAAhC3B,eAAeC,cACjBqB,KAAK7E,MAAM6B,W,wCAmBb,IAEIsD,EAFEnC,EAAQ6B,KAAK1E,UACbiF,EAAQC,KAAKC,MAAMT,KAAK7E,MAAMqD,YAAcwB,KAAK7E,MAAMuF,SAAWvC,GAExE,IAAKmC,EAAI,IAAKA,EAAElC,OAASmC,EAAOD,GAAK,KACrC,KAAOA,EAAElC,OAASD,EAAOmC,GAAK,KAC9B,OAAOA,I,oCAIP,MAAgD,MAAzCN,KAAK3E,OAAOU,YAAYS,OAAO,EAAG,K,sCAG1B,IAAD,OACdwD,KAAK3E,OAAOU,YAAc,IAC1B,IAAM4E,EAAcpE,aAAY,WACzB,EAAKM,eAIN,EAAKxB,OAAOU,YAAYqC,QAAU,EAAK9C,YACzC,EAAKD,OAAOU,YAAc,IAE5B,EAAKV,OAAOU,aAAe,KANzBY,cAAcgE,KAOf,O,iCAIH,IAAMC,EAAcZ,KAAK7E,MAAMgB,YACX0E,IAAhBD,GACJA,EAAYtB,MAAK,SAAAwB,GACfhB,IAAed,IAAI,MAAO,mBAE3B+B,OAAM,SAAAjF,GACc,oBAAfA,EAAMkF,MACRlB,IAAed,IAAI,MAAO,oBAAsBlD,Q,+BAsB5C,IAAD,OACP,OACE,kBAAChB,EAAD,KACE,0BAAMmG,UAAU,SAASC,IAAK,SAAAC,GAAG,OAAI,EAAK9F,OAAS8F,GAAKC,QAASpB,KAAK1B,aAAtE,c,0CAKe,IAAD,OAGlB,IAAK,IAAMQ,KAFXkB,KAAK5C,eACLqB,OAAO4C,iBAAiB,SAAUrB,KAAK5C,cACvB4C,KAAKnE,aACnBmE,KAAK7E,MAAMkG,iBAAiBvC,EAAGkB,KAAKnE,aAAaiD,IACnDkB,KAAKsB,eAAehC,MAAK,WACvBP,QAAQC,IAAI,MAAO,mBACnBD,QAAQC,IAAI,EAAKzD,UACbkD,OAAOC,gBAAkBA,eAAewB,mBAC1C,EAAKrB,YAAYH,eAAewB,oBAE5BtF,EAAOC,UAAU,EAAKgE,YAAY,Q,6CAO1C,IAAK,IAAMC,KADXL,OAAO8C,oBAAoB,SAAUvB,KAAK5C,cAC1B4C,KAAKnE,aACnBmE,KAAK7E,MAAMoG,oBAAoBzC,EAAGkB,KAAKnE,aAAaiD,Q,GApOhC0C,IAAMC,WAwOjBxG","file":"static/js/3.b9fad2a0.chunk.js","sourcesContent":["const Config = {\n  autoplay: false\n};\n\nexport default Config;","import React from 'react';\nimport styled from 'styled-components/macro';\nimport Config from '../Config';\nimport MessageHandler from '../common/MessageHandler';\n\nconst PlayerView = styled.div`\n  width: 100%;\n  padding: 0.5rem;\n  box-sizing: border-box;\n  font-family:'Source Sans Pro','Courier New','Courier',monospace;\n`;\n\nclass MusicPlayer extends React.Component {\n  audio = new Audio();\n  status = null;\n  textSpace = 10;\n  playlist = new Array(\"1599488\");\n  playingIndex = 0;\n  waittingForPlay = false;\n  recoveryProgressHandled = false;\n  _DEBUG = false;\n\n  playerEvents = {\n    error: () => {\n      this.status.textContent = \"bgm: error \" + this.audio.error.code;\n    },\n    canplay: () => {\n      if (this.waittingForPlay) this.callPlay();\n    },\n    play: () => {\n      this.waittingForPlay = false;\n      this.status.textContent = \"bgm: play\";\n    },\n    playing: () => {\n      this.status.textContent = \"#\";\n      if (!this.recoveryProgressHandled) {\n        this.recoveryProgress();\n      }\n      const progressLoop = setInterval(() => {\n        if (this.status.textContent.substr(0, 1) !== \"#\") {\n          clearInterval(progressLoop);\n          return;\n        }\n        this.status.textContent = this.getProgressText();\n        this.saveProgressInfo();\n      }, 300);\n    },\n    progress: () => {\n      if ((!this.isAnimating()) && this.audio.readyState < 4) {\n        this.showAnimating();\n      }\n    },\n    pause: () => {\n      this.status.textContent = \"bgm: pause\";\n    },\n    waiting: () => {\n      if (!this.isAnimating()) {\n        this.showAnimating();\n      }\n    },\n    ended: () => {\n      this.status.textContent = \"bgm: ended\";\n      this.saveProgressInfo();\n      this.playNext();\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    if (this._DEBUG) {\n      for (const i in this.playerEvents) {\n        this.playerEvents['_' + i] = this.playerEvents[i];\n        this.playerEvents[i] = () => {\n          console.log(`bgm: event[${i}]`);\n          this.playerEvents['_' + i]();\n        }\n      }\n    }\n  }\n\n  loadPlaylist() {\n    return new Promise((resolve, reject) => {\n      const url = process.env.PUBLIC_URL + \"/playlist.json\";\n      fetch(url)\n        .then(res => res.json())\n        .then(\n          result => {\n            const list = result.result.tracks;\n            for (const i in list)\n              this.playlist.push(list[i].id);\n            resolve(result);\n          },\n          error => {\n            MessageHandler.log(error);\n            reject(error);\n          }\n        );\n    });\n  }\n\n  playByIndex(index) {\n    if (index >= this.playlist.length || index < 0) {\n      MessageHandler.log(`Playlist[${index}] not exists. `);\n      return;\n    }\n    this.playingIndex = index;\n    const url = \"https://music.163.com/song/media/outer/url?id=\" + this.playlist[index] + \".mp3\";\n    this.audio.src = url;\n    if (window.sessionStorage)\n      sessionStorage.music_playingIndex = index;\n    this.waittingForPlay = true;\n  }\n\n  playNext() {\n    const nextIndex = parseInt(this.playingIndex) + 1;\n    if (nextIndex < this.playlist.length) {\n      this.playByIndex(nextIndex);\n    }else{\n      this.playByIndex(0);\n    }\n  }\n\n  saveProgressInfo() {\n    if (!window.sessionStorage) return;\n    if (this.audio.ended) {\n      sessionStorage.music_currentTime = 0;\n    }else{\n      sessionStorage.music_currentTime = this.audio.currentTime;\n    }\n  }\n\n  recoveryProgress() {\n    this.recoveryProgressHandled = true;\n    if (!window.sessionStorage) return;\n    if (sessionStorage.music_currentTime) {\n      this.audio.currentTime = sessionStorage.music_currentTime;\n    }\n    if (sessionStorage.music_paused === \"paused\") {\n      this.audio.pause();\n    }\n  }\n\n  getTextSpace = () => {\n    const span = document.createElement(\"span\");\n    span.style.visibility = \"hidden\";\n    this.status.parentNode.appendChild(span);\n    const containerStyle = getComputedStyle(this.status.parentNode);\n    for (span.textContent = \"#\";\n      this.status.parentNode.offsetWidth - \n        (parseFloat(containerStyle.paddingLeft) + parseFloat(containerStyle.paddingRight))\n         > span.getBoundingClientRect().width;\n      span.textContent += \"#\");\n    this.textSpace = span.textContent.length - 1;\n    this.status.parentNode.removeChild(span);\n  }\n\n  getProgressText() {\n    const width = this.textSpace;\n    const count = Math.round(this.audio.currentTime / this.audio.duration * width);\n    let s;\n    for (s = \"#\"; s.length < count; s += \"#\");\n    for (; s.length < width; s += \"=\");\n    return s;\n  }\n\n  isAnimating() {\n    return this.status.textContent.substr(0, 1) === \">\";\n  }\n\n  showAnimating() {\n    this.status.textContent = \">\";\n    const processLoop = setInterval(() => {\n      if (!this.isAnimating()) {\n        clearInterval(processLoop);\n        return;\n      }\n      if (this.status.textContent.length >= this.textSpace) {\n        this.status.textContent = \"\";\n      }\n      this.status.textContent += \">\";\n    }, 200);\n  }\n\n  callPlay() {\n    const playPromise = this.audio.play();\n    if (playPromise === undefined) return;\n    playPromise.then(_ => {\n      MessageHandler.log(\"bgm\", \"play started\");\n    })\n    .catch(error => {\n      if (error.name !== \"NotAllowedError\") {\n        MessageHandler.log(\"bgm\", \"play interruped: \" + error);\n      }\n    });\n  }\n\n  handleClick = () => {\n    if (this.audio.paused || this.audio.currentTime === 0) {\n      if (window.sessionStorage)\n        sessionStorage.music_paused = null;\n      if (this.audio.src) {\n        this.callPlay();\n      }else{\n        this.playByIndex(0);\n      }\n    }else{\n      if (window.sessionStorage) {\n        sessionStorage.music_paused = \"paused\";\n      }\n      this.audio.pause();\n    }\n  }\n\n  render() {\n    return (\n      <PlayerView>\n        <span className='status' ref={dom => this.status = dom} onClick={this.handleClick}>music..</span>\n      </PlayerView>\n    )\n  }\n\n  componentDidMount() {\n    this.getTextSpace();\n    window.addEventListener(\"resize\", this.getTextSpace);\n    for (const i in this.playerEvents)\n      this.audio.addEventListener(i, this.playerEvents[i]);\n    this.loadPlaylist().then(() => {\n      console.log(\"bgm\", \"playlist loaded\");\n      console.log(this.playlist);\n      if (window.sessionStorage && sessionStorage.music_playingIndex) {\n        this.playByIndex(sessionStorage.music_playingIndex);\n      }else{\n        if (Config.autoplay) this.playByIndex(0);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.getTextSpace);\n    for (const i in this.playerEvents)\n      this.audio.removeEventListener(i, this.playerEvents[i]);\n  }\n}\n\nexport default MusicPlayer;"],"sourceRoot":""}
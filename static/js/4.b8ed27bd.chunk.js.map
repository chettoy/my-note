{"version":3,"sources":["components/MusicPlayer.js"],"names":["PlayerView","styled","div","MusicPlayer","React","Component","constructor","props","super","audio","Audio","status","textSpace","playlist","playingIndex","waittingForPlay","recoveryProgressHandled","_DEBUG","playerEvents","error","this","textContent","code","canplay","callPlay","play","playing","recoveryProgress","progressLoop","setInterval","substr","getProgressText","saveProgressInfo","clearInterval","progress","isAnimating","readyState","showAnimating","pause","waiting","ended","playNext","getTextSpace","span","document","createElement","style","visibility","parentNode","appendChild","containerStyle","getComputedStyle","offsetWidth","parseFloat","paddingLeft","paddingRight","getBoundingClientRect","width","length","removeChild","handleClick","paused","currentTime","window","sessionStorage","music_paused","src","playByIndex","i","console","log","loadPlaylist","Promise","resolve","reject","fetch","process","then","res","json","result","list","tracks","push","id","MessageHandler","index","url","music_playingIndex","nextIndex","parseInt","music_currentTime","count","Math","round","duration","s","processLoop","playPromise","undefined","_","catch","name","render","className","ref","dom","onClick","componentDidMount","addEventListener","Config","autoplay","componentWillUnmount","removeEventListener"],"mappings":"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","file":"static/js/4.b8ed27bd.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components/macro';\nimport Config from '../Config';\nimport MessageHandler from '../common/MessageHandler';\n\nconst PlayerView = styled.div`\n  width: 100%;\n  padding: 0.5rem;\n  box-sizing: border-box;\n  font-family: 'Source Sans Pro', 'Courier New', 'Courier', monospace;\n`;\n\nclass MusicPlayer extends React.Component {\n  audio = new Audio();\n  status = null;\n  textSpace = 10;\n  playlist = [];\n  playingIndex = 0;\n  waittingForPlay = false;\n  recoveryProgressHandled = false;\n  _DEBUG = false;\n\n  playerEvents = {\n    error: () => {\n      this.status.textContent = \"bgm: error \" + this.audio.error.code;\n    },\n    canplay: () => {\n      if (this.waittingForPlay) this.callPlay();\n    },\n    play: () => {\n      this.waittingForPlay = false;\n      this.status.textContent = \"bgm: play\";\n    },\n    playing: () => {\n      this.status.textContent = \"#\";\n      if (!this.recoveryProgressHandled) {\n        this.recoveryProgress();\n      }\n      const progressLoop = setInterval(() => {\n        if (this.status.textContent.substr(0, 1) !== \"#\") {\n          clearInterval(progressLoop);\n          return;\n        }\n        this.status.textContent = this.getProgressText();\n        this.saveProgressInfo();\n      }, 300);\n    },\n    progress: () => {\n      if ((!this.isAnimating()) && this.audio.readyState < 4) {\n        this.showAnimating();\n      }\n    },\n    pause: () => {\n      this.status.textContent = \"bgm: pause\";\n    },\n    waiting: () => {\n      if (!this.isAnimating()) {\n        this.showAnimating();\n      }\n    },\n    ended: () => {\n      this.status.textContent = \"bgm: ended\";\n      this.saveProgressInfo();\n      this.playNext();\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    if (this._DEBUG) {\n      for (const i in this.playerEvents) {\n        this.playerEvents['_' + i] = this.playerEvents[i];\n        this.playerEvents[i] = () => {\n          console.log(`bgm: event[${i}]`);\n          this.playerEvents['_' + i]();\n        }\n      }\n    }\n  }\n\n  loadPlaylist() {\n    return new Promise((resolve, reject) => {\n      const url = process.env.PUBLIC_URL + \"/playlist.json\";\n      fetch(url)\n        .then(res => res.json())\n        .then(\n          result => {\n            const list = result.result.tracks;\n            for (const i in list)\n              this.playlist.push(list[i].id);\n            resolve(result);\n          },\n          error => {\n            MessageHandler.log(error);\n            reject(error);\n          }\n        );\n    });\n  }\n\n  playByIndex(index) {\n    if (index >= this.playlist.length || index < 0) {\n      MessageHandler.log(`Playlist[${index}] not exists. `);\n      return;\n    }\n    this.playingIndex = index;\n    const url = \"https://music.163.com/song/media/outer/url?id=\" + this.playlist[index] + \".mp3\";\n    this.audio.src = url;\n    if (window.sessionStorage)\n      sessionStorage.music_playingIndex = index;\n    this.waittingForPlay = true;\n  }\n\n  playNext() {\n    const nextIndex = parseInt(this.playingIndex) + 1;\n    if (nextIndex < this.playlist.length) {\n      this.playByIndex(nextIndex);\n    }else{\n      this.playByIndex(0);\n    }\n  }\n\n  saveProgressInfo() {\n    if (!window.sessionStorage) return;\n    if (this.audio.ended) {\n      sessionStorage.music_currentTime = 0;\n    }else{\n      sessionStorage.music_currentTime = this.audio.currentTime;\n    }\n  }\n\n  recoveryProgress() {\n    this.recoveryProgressHandled = true;\n    if (!window.sessionStorage) return;\n    if (sessionStorage.music_currentTime) {\n      this.audio.currentTime = sessionStorage.music_currentTime;\n    }\n    if (sessionStorage.music_paused === \"paused\") {\n      this.audio.pause();\n    }\n  }\n\n  getTextSpace = () => {\n    const span = document.createElement(\"span\");\n    span.style.visibility = \"hidden\";\n    this.status.parentNode.appendChild(span);\n    const containerStyle = getComputedStyle(this.status.parentNode);\n    for (span.textContent = \"#\";\n      this.status.parentNode.offsetWidth - \n        (parseFloat(containerStyle.paddingLeft) + parseFloat(containerStyle.paddingRight))\n         > span.getBoundingClientRect().width;\n      span.textContent += \"#\");\n    this.textSpace = span.textContent.length - 1;\n    this.status.parentNode.removeChild(span);\n  }\n\n  getProgressText() {\n    const width = this.textSpace;\n    const count = Math.round(this.audio.currentTime / this.audio.duration * width);\n    let s;\n    for (s = \"#\"; s.length < count; s += \"#\");\n    for (; s.length < width; s += \"=\");\n    return s;\n  }\n\n  isAnimating() {\n    return this.status.textContent.substr(0, 1) === \">\";\n  }\n\n  showAnimating() {\n    this.status.textContent = \">\";\n    const processLoop = setInterval(() => {\n      if (!this.isAnimating()) {\n        clearInterval(processLoop);\n        return;\n      }\n      if (this.status.textContent.length >= this.textSpace) {\n        this.status.textContent = \"\";\n      }\n      this.status.textContent += \">\";\n    }, 200);\n  }\n\n  callPlay() {\n    const playPromise = this.audio.play();\n    if (playPromise === undefined) return;\n    playPromise.then(_ => {\n      MessageHandler.log(\"bgm\", \"play started\");\n    })\n    .catch(error => {\n      if (error.name !== \"NotAllowedError\") {\n        MessageHandler.log(\"bgm\", \"play interruped: \" + error);\n      }\n    });\n  }\n\n  handleClick = () => {\n    if (this.audio.paused || this.audio.currentTime === 0) {\n      if (window.sessionStorage)\n        sessionStorage.music_paused = null;\n      if (this.audio.src) {\n        this.callPlay();\n      }else{\n        this.playByIndex(0);\n      }\n    }else{\n      if (window.sessionStorage) {\n        sessionStorage.music_paused = \"paused\";\n      }\n      this.audio.pause();\n    }\n  }\n\n  render() {\n    return (\n      <PlayerView>\n        <span className='status' ref={dom => this.status = dom} onClick={this.handleClick}>music..</span>\n      </PlayerView>\n    )\n  }\n\n  componentDidMount() {\n    this.getTextSpace();\n    window.addEventListener(\"resize\", this.getTextSpace);\n    for (const i in this.playerEvents)\n      this.audio.addEventListener(i, this.playerEvents[i]);\n    this.loadPlaylist().then(() => {\n      console.log(\"bgm\", \"playlist loaded\");\n      console.log(this.playlist);\n      if (window.sessionStorage && sessionStorage.music_playingIndex) {\n        this.playByIndex(sessionStorage.music_playingIndex);\n      }else{\n        if (Config.autoplay) this.playByIndex(0);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.getTextSpace);\n    for (const i in this.playerEvents)\n      this.audio.removeEventListener(i, this.playerEvents[i]);\n  }\n}\n\nexport default MusicPlayer;"],"sourceRoot":""}
{"version":3,"sources":["Config.js","components/MusicPlayer.js"],"names":["Config","autoplay","PlayerView","styled","div","withConfig","displayName","componentId","MusicPlayer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","audio","Audio","status","textSpace","playlist","Array","playingIndex","waittingForPlay","recoveryProgressHandled","_DEBUG","playerEvents","error","textContent","code","canplay","callPlay","play","playing","recoveryProgress","progressLoop","setInterval","substr","getProgressText","saveProgressInfo","clearInterval","progress","isAnimating","readyState","showAnimating","pause","waiting","ended","playNext","getTextSpace","span","document","createElement","style","visibility","parentNode","appendChild","containerStyle","getComputedStyle","offsetWidth","parseFloat","paddingLeft","paddingRight","getBoundingClientRect","width","length","removeChild","handleClick","paused","currentTime","window","sessionStorage","music_paused","src","_loop","i","console","log","concat","_this2","Promise","resolve","reject","fetch","process","then","res","json","result","list","tracks","push","id","MessageHandler","index","url","music_playingIndex","nextIndex","parseInt","playByIndex","music_currentTime","s","count","Math","round","duration","_this3","processLoop","playPromise","undefined","_","catch","name","_this4","react_default","a","className","ref","dom","onClick","_this5","addEventListener","loadPlaylist","removeEventListener","React","Component"],"mappings":"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","file":"static/js/3.72ec8a72.chunk.js","sourcesContent":["const Config = {\n  autoplay: false\n};\n\nexport default Config;","import React from 'react';\nimport styled from 'styled-components/macro';\nimport Config from '../Config';\nimport MessageHandler from '../common/MessageHandler';\n\nconst PlayerView = styled.div`\n  width: 100%;\n  padding: 0.5rem;\n  box-sizing: border-box;\n  font-family:'Source Sans Pro','Courier New','Courier',monospace;\n`;\n\nclass MusicPlayer extends React.Component {\n  audio = new Audio();\n  status = null;\n  textSpace = 10;\n  playlist = new Array(\"1599488\");\n  playingIndex = 0;\n  waittingForPlay = false;\n  recoveryProgressHandled = false;\n  _DEBUG = false;\n\n  playerEvents = {\n    error: () => {\n      this.status.textContent = \"bgm: error \" + this.audio.error.code;\n    },\n    canplay: () => {\n      if (this.waittingForPlay) this.callPlay();\n    },\n    play: () => {\n      this.waittingForPlay = false;\n      this.status.textContent = \"bgm: play\";\n    },\n    playing: () => {\n      this.status.textContent = \"#\";\n      if (!this.recoveryProgressHandled) {\n        this.recoveryProgress();\n      }\n      const progressLoop = setInterval(() => {\n        if (this.status.textContent.substr(0, 1) !== \"#\") {\n          clearInterval(progressLoop);\n          return;\n        }\n        this.status.textContent = this.getProgressText();\n        this.saveProgressInfo();\n      }, 300);\n    },\n    progress: () => {\n      if ((!this.isAnimating()) && this.audio.readyState < 4) {\n        this.showAnimating();\n      }\n    },\n    pause: () => {\n      this.status.textContent = \"bgm: pause\";\n    },\n    waiting: () => {\n      if (!this.isAnimating()) {\n        this.showAnimating();\n      }\n    },\n    ended: () => {\n      this.status.textContent = \"bgm: ended\";\n      this.saveProgressInfo();\n      this.playNext();\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    if (this._DEBUG) {\n      for (const i in this.playerEvents) {\n        this.playerEvents['_' + i] = this.playerEvents[i];\n        this.playerEvents[i] = () => {\n          console.log(`bgm: event[${i}]`);\n          this.playerEvents['_' + i]();\n        }\n      }\n    }\n  }\n\n  loadPlaylist() {\n    return new Promise((resolve, reject) => {\n      const url = process.env.PUBLIC_URL + \"/playlist.json\";\n      fetch(url)\n        .then(res => res.json())\n        .then(\n          result => {\n            const list = result.result.tracks;\n            for (const i in list)\n              this.playlist.push(list[i].id);\n            resolve(result);\n          },\n          error => {\n            MessageHandler.log(error);\n            reject(error);\n          }\n        );\n    });\n  }\n\n  playByIndex(index) {\n    if (index >= this.playlist.length || index < 0) {\n      MessageHandler.log(`Playlist[${index}] not exists. `);\n      return;\n    }\n    this.playingIndex = index;\n    const url = \"https://music.163.com/song/media/outer/url?id=\" + this.playlist[index] + \".mp3\";\n    this.audio.src = url;\n    if (window.sessionStorage)\n      sessionStorage.music_playingIndex = index;\n    this.waittingForPlay = true;\n  }\n\n  playNext() {\n    const nextIndex = parseInt(this.playingIndex) + 1;\n    if (nextIndex < this.playlist.length) {\n      this.playByIndex(nextIndex);\n    }else{\n      this.playByIndex(0);\n    }\n  }\n\n  saveProgressInfo() {\n    if (!window.sessionStorage) return;\n    if (this.audio.ended) {\n      sessionStorage.music_currentTime = 0;\n    }else{\n      sessionStorage.music_currentTime = this.audio.currentTime;\n    }\n  }\n\n  recoveryProgress() {\n    this.recoveryProgressHandled = true;\n    if (!window.sessionStorage) return;\n    if (sessionStorage.music_currentTime) {\n      this.audio.currentTime = sessionStorage.music_currentTime;\n    }\n    if (sessionStorage.music_paused === \"paused\") {\n      this.audio.pause();\n    }\n  }\n\n  getTextSpace = () => {\n    const span = document.createElement(\"span\");\n    span.style.visibility = \"hidden\";\n    this.status.parentNode.appendChild(span);\n    const containerStyle = getComputedStyle(this.status.parentNode);\n    for (span.textContent = \"#\";\n      this.status.parentNode.offsetWidth - \n        (parseFloat(containerStyle.paddingLeft) + parseFloat(containerStyle.paddingRight))\n         > span.getBoundingClientRect().width;\n      span.textContent += \"#\");\n    this.textSpace = span.textContent.length - 1;\n    this.status.parentNode.removeChild(span);\n  }\n\n  getProgressText() {\n    const width = this.textSpace;\n    const count = Math.round(this.audio.currentTime / this.audio.duration * width);\n    let s;\n    for (s = \"#\"; s.length < count; s += \"#\");\n    for (; s.length < width; s += \"=\");\n    return s;\n  }\n\n  isAnimating() {\n    return this.status.textContent.substr(0, 1) === \">\";\n  }\n\n  showAnimating() {\n    this.status.textContent = \">\";\n    const processLoop = setInterval(() => {\n      if (!this.isAnimating()) {\n        clearInterval(processLoop);\n        return;\n      }\n      if (this.status.textContent.length >= this.textSpace) {\n        this.status.textContent = \"\";\n      }\n      this.status.textContent += \">\";\n    }, 200);\n  }\n\n  callPlay() {\n    const playPromise = this.audio.play();\n    if (playPromise === undefined) return;\n    playPromise.then(_ => {\n      MessageHandler.log(\"bgm\", \"play started\");\n    })\n    .catch(error => {\n      if (error.name !== \"NotAllowedError\") {\n        MessageHandler.log(\"bgm\", \"play interruped: \" + error);\n      }\n    });\n  }\n\n  handleClick = () => {\n    if (this.audio.paused || this.audio.currentTime === 0) {\n      if (window.sessionStorage)\n        sessionStorage.music_paused = null;\n      if (this.audio.src) this.callPlay();\n    }else{\n      if (window.sessionStorage) {\n        sessionStorage.music_paused = \"paused\";\n      }\n      this.audio.pause();\n    }\n  }\n\n  render() {\n    return (\n      <PlayerView>\n        <span className='status' ref={dom => this.status = dom} onClick={this.handleClick}>music..</span>\n      </PlayerView>\n    )\n  }\n\n  componentDidMount() {\n    this.getTextSpace();\n    window.addEventListener(\"resize\", this.getTextSpace);\n    for (const i in this.playerEvents)\n      this.audio.addEventListener(i, this.playerEvents[i]);\n    this.loadPlaylist().then(() => {\n      MessageHandler.log(\"bgm\", \"playlist loaded\");\n      console.log(this.playlist);\n      if (window.sessionStorage && sessionStorage.music_playingIndex) {\n        this.playByIndex(sessionStorage.music_playingIndex);\n      }else{\n        if (Config.autoplay) this.playByIndex(0);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.getTextSpace);\n    for (const i in this.playerEvents)\n      this.audio.removeEventListener(i, this.playerEvents[i]);\n  }\n}\n\nexport default MusicPlayer;"],"sourceRoot":""}